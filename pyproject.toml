[project]
name = "resume-analyzer"
version = "1.0.0"
description = "AI-powered resume analyzer that compares resumes against job descriptions using OpenAI API"
authors = [
    { name = "Abhishek Gupta", email = "abhishek.gup87@gmail.com" }
]
readme = "README.md"
requires-python = ">=3.9"
license = { text = "MIT" }
keywords = ["resume", "analyzer", "openai", "ats", "job-matching", "ai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business",
    "Topic :: Text Processing",
]

dependencies = [
    "openai>=2.6.1",
    "python-dotenv>=1.1.1",
    "pypdf2>=3.0.1",
    "pdfplumber>=0.11.7",
    "python-docx>=1.2.0",
    "dash==3.2.0",
    "dash-bootstrap-components==2.0.4",
    "plotly==6.3.1",
    "gunicorn>=23.0.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=8.3.3",
    "pytest-cov>=6.0.0",
    "black>=24.10.0",
    "ruff>=0.7.3",
    "mypy>=1.13.0",
]

# All optional dependencies
all = [
    "resume-analyzer[dev]",
]

[project.urls]
Homepage = "https://github.com/yourusername/resume-analyzer"
Documentation = "https://github.com/yourusername/resume-analyzer#readme"
Repository = "https://github.com/yourusername/resume-analyzer"
Issues = "https://github.com/yourusername/resume-analyzer/issues"

[project.scripts]
resume-analyzer = "resume_analyzer:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/resume_analyzer"]

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=resume_analyzer",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
